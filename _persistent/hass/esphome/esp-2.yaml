---
esphome:
  area: Guest Room
  friendly_name: esp-2
  min_version: 2025.5.0
  name: esp-2
  platformio_options:
    board_build.arduino.memory_type: opi_opi

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 32MB
  framework:
    type: esp-idf
  variant: esp32s3

api:
  encryption:
    key: !secret api_2
  reboot_timeout: 0s

ota:
  - platform: esphome
    id: ota_esphome
    password: !secret ota_2

logger:

wifi:
  domain: .int.tnt.photo
  password: !secret wifi_password
  ssid: !secret wifi_ssid

binary_sensor:
  - platform: status
    device_class: connectivity
    entity_category: diagnostic
    id: system_status
    name: Node Status
  - platform: gpio
    filters:
      - delayed_on: 10ms
      - delayed_off: 1000ms
    name: Sound level hit
    pin:
      inverted: true
      mode:
        input: true
        pullup: true
      number: GPIO14

bluetooth_proxy:
  active: true

button:
  - platform: safe_mode
    id: btn_safe_mode
    name: Safe Mode Boot
  - platform: factory_reset
    id: btn_factory_reset
    name: Factory reset
  - platform: restart
    id: btn_restart
    name: Restart

esp32_ble_tracker:
  scan_parameters:
    active: true

globals:
  - id: env_peak_accum
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: env_peak_last
    type: float
    restore_value: no
    initial_value: '0.0'

i2c:
  - id: bus_bme280
    scl: GPIO12
    sda: GPIO10

interval:
  - interval: 1s
    then:
      - lambda: |-
          id(env_peak_last) = id(env_peak_accum);
          id(env_peak_accum) = 0.0f;

light:
  - platform: esp32_rmt_led_strip
    chipset: ws2812
    id: led
    name: LED
    num_leds: 1
    pin: GPIO38
    restore_mode: RESTORE_DEFAULT_OFF
    rgb_order: GRB
#    rmt_channel: 0

sensor:
  - platform: uptime
    device_class: duration
    entity_category: diagnostic
    icon: mdi:timer-outline
    id: uptime_s
    name: Uptime
    state_class: total_increasing
    update_interval: 300s
  - platform: wifi_signal
    accuracy_decimals: 0
    device_class: signal_strength
    entity_category: diagnostic
    icon: mdi:wifi-strength-3
    id: wifi_signal_db
    name: Wi-Fi Signal
    state_class: measurement
    unit_of_measurement: dBm
    update_interval: 60s
  - platform: bme280_i2c
    address: 0x76
    i2c_id: bus_bme280
    humidity:
      id: bme280_h
      name: Humidity
    pressure:
      id: bme280_p
      name: Pressure
    temperature:
      id: bme280_t
      name: Temperature
      oversampling: 16x
    update_interval: 60s
  - platform: absolute_humidity
    humidity: bme280_h
    id: bme280_h_abs
    name: Absolute humidity
    temperature: bme280_t
  - platform: template
    icon: "mdi:thermometer-alert"
    id: bme280_dew_point
    lambda: |-
      return (243.5*(log(id(bme280_h).state/100)+((17.67*id(bme280_t).state)/
      (243.5+id(bme280_t).state)))/(17.67-log(id(bme280_h).state/100)-
      ((17.67*id(bme280_t).state)/(243.5+id(bme280_t).state))));
    name: Dew point
    unit_of_measurement: Â°C
  - platform: template
    accuracy_decimals: 2
    filters:
      - filter_out: nan
    icon: "mdi:gauge"
    id: bme280_vpd
    lambda: |-
      return (((100 - id(bme280_h).state) / 100.0) * (0.6108 * exp((17.27 * id(bme280_t).state) / (id(bme280_t).state + 237.3))));
    name: VPD
    update_interval: 10s
    unit_of_measurement: kPa
  - platform: adc
    accuracy_decimals: 5
    attenuation: 12db
    filters:
      - lambda: |-
          static float mean = 0.0f;
          const float alpha_mean = 0.001f;
          mean = (1.0f - alpha_mean) * mean + alpha_mean * x;
          float dev = fabsf(x - mean);
          static float env = 0.0f;
          const float attack = 0.25f;
          const float release = 0.01f;
          float coeff = (dev > env) ? attack : release;
          env = coeff * dev + (1.0f - coeff) * env;
          return env;
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
    id: mic_adc_raw
    internal: true
    name: "Mic Envelope"
    on_value:
      then:
        - lambda: |-
            if (x > id(env_peak_accum)) id(env_peak_accum) = x;
    pin: GPIO4
    update_interval: 5ms
  - platform: template
    accuracy_decimals: 1
    id: mic_pseudodb
    lambda: |-
      float peak = id(env_peak_last);
      float floor = 0.02f;
      float db = 20.0f * log10f((peak + 1e-6f) / floor);
      if (db < 0.0f) db = 0.0f;
      if (db > 60.0f) db = 60.0f;
      return db;
    name: "Mic Level"
    unit_of_measurement: "dB"
    update_interval: 1s
  - platform: template
    accuracy_decimals: 0
    id: mic_level_percent
    lambda: |-
      const float RAW_MAX_V = 3.90f;
      const float RAW_MIN_V = 0.25f;
      float v = id(env_peak_last);
      if (v < RAW_MIN_V) v = RAW_MIN_V;
      if (v > RAW_MAX_V) v = RAW_MAX_V;
      float pct = (v - RAW_MIN_V) * 100.0f / (RAW_MAX_V - RAW_MIN_V);
      if (pct < 0.0f) pct = 0.0f;
      if (pct > 100.0f) pct = 100.0f;
      return pct;
    name: "Mic Level (%)"
    unit_of_measurement: "%"
    update_interval: 1s
